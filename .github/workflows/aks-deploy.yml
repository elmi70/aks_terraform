name: 'AKS Cluster Deployment'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'tf/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'tf/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pull-requests: write
  
env:
  LOCATION: westeurope
  TERRAFORM_STATE_RG: aks-tfstate-rg
  TERRAFORM_STATE_STORAGE: akstfstatesahal
  TERRAFORM_STATE_CONTAINER: tfstate
  TERRAFORM_STATE_KEY: aks-cluster.tfstate

jobs:
  setup-backend:
    name: Setup AKS Terraform State Backend
    runs-on: ubuntu-latest
    outputs:
      access_key: ${{ steps.create-storage.outputs.access_key }}
      client_id: ${{ steps.extract-sp.outputs.client_id }}
      client_secret: ${{ steps.extract-sp.outputs.client_secret }}
      subscription_id: ${{ steps.extract-sp.outputs.subscription_id }}
      tenant_id: ${{ steps.extract-sp.outputs.tenant_id }}

    steps:
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Extract Service Principal Credentials
      id: extract-sp
      run: |
        # Extract credentials from AZURE_CREDENTIALS JSON
        ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')
        ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')
        ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')
        ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')
        
        # Output for future jobs
        echo "client_id=$ARM_CLIENT_ID" >> $GITHUB_OUTPUT
        echo "client_secret=$ARM_CLIENT_SECRET" >> $GITHUB_OUTPUT
        echo "subscription_id=$ARM_SUBSCRIPTION_ID" >> $GITHUB_OUTPUT
        echo "tenant_id=$ARM_TENANT_ID" >> $GITHUB_OUTPUT
      
    - name: Create AKS Terraform State Storage
      id: create-storage
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          # Check if resource group exists
          if ! az group show --name $TERRAFORM_STATE_RG &>/dev/null; then
            echo "Creating resource group $TERRAFORM_STATE_RG"
            az group create -n $TERRAFORM_STATE_RG -l $LOCATION
          else
            echo "Resource group $TERRAFORM_STATE_RG already exists"
          fi
          
          # Check if storage account exists
          if ! az storage account show --name $TERRAFORM_STATE_STORAGE --resource-group $TERRAFORM_STATE_RG &>/dev/null; then
            echo "Creating storage account $TERRAFORM_STATE_STORAGE"
            az storage account create -g $TERRAFORM_STATE_RG -l $LOCATION \
              --name $TERRAFORM_STATE_STORAGE \
              --sku Standard_LRS \
              --encryption-services blob
          else
            echo "Storage account $TERRAFORM_STATE_STORAGE already exists"
          fi
          
          # Retrieve the storage account key
          ACCOUNT_KEY=$(az storage account keys list --resource-group $TERRAFORM_STATE_RG --account-name $TERRAFORM_STATE_STORAGE --query [0].value -o tsv)
          
          # Create a storage container (for the Terraform State)
          az storage container create --name $TERRAFORM_STATE_CONTAINER --account-name $TERRAFORM_STATE_STORAGE --account-key $ACCOUNT_KEY

          # Output the access key
          echo "access_key=$ACCOUNT_KEY" >> $GITHUB_OUTPUT
          echo "Terraform backend storage configured successfully in $TERRAFORM_STATE_RG"

  terraform-plan:
    name: Plan AKS Cluster with Terraform
    runs-on: ubuntu-latest
    needs: [setup-backend]
    defaults:
      run:
        working-directory: ./tf

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set Terraform Environment Variables
      run: |
        # Set Service Principal credentials from previous job
        echo "ARM_CLIENT_ID=${{ needs.setup-backend.outputs.client_id }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ needs.setup-backend.outputs.client_secret }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ needs.setup-backend.outputs.subscription_id }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ needs.setup-backend.outputs.tenant_id }}" >> $GITHUB_ENV
        # Set Storage Access Key from previous job
        echo "TERRAFORM_STATE_ACCESS_KEY=${{ needs.setup-backend.outputs.access_key }}" >> $GITHUB_ENV
        
        # Debug output (safely)
        echo "Access key first 5 chars: ${TERRAFORM_STATE_ACCESS_KEY:0:5}..."
    
    - name: Verify Service Principal Permissions
      uses: azure/CLI@v2
      with:
        azcliversion: latest
        inlineScript: |
          echo "Verifying Azure resource permissions..."
          # Test if we have contributor access
          if az group list --query "[0:1].name" -o tsv &>/dev/null; then
            echo "‚úÖ Service principal has necessary Azure resource permissions"
          else
            echo "‚ùå Service principal is missing necessary resource permissions"
            exit 1
          fi
          
          echo "Verifying Azure AD permissions..."
          # Test if we can list groups - requires Graph API permissions
          if az ad group list --query "[0:1].displayName" -o tsv &>/dev/null; then
            echo "‚úÖ Service principal has necessary Graph API permissions"
          else
            echo "‚ùå Service principal is missing Graph API permissions"
            echo "Make sure your service principal has Group.Read.All or Directory.Read.All permissions"
            exit 1
          fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
  
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true
    
    - name: Terraform Initialize
      id: init
      run: |
        echo "Running terraform init with access key starting with: ${TERRAFORM_STATE_ACCESS_KEY:0:5}..."
        terraform init \
          -backend-config="storage_account_name=$TERRAFORM_STATE_STORAGE" \
          -backend-config="container_name=$TERRAFORM_STATE_CONTAINER" \
          -backend-config="access_key=$TERRAFORM_STATE_ACCESS_KEY" \
          -backend-config="key=$TERRAFORM_STATE_KEY"
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -out=aks-tfplan -input=false
      continue-on-error: true
    
    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
    
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
    
          </details>
    
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    
          <details><summary>Show Plan</summary>
    
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
    
          </details>
    
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    # Upload Terraform plan as an artifact
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ./tf/aks-tfplan
        retention-days: 1

  terraform-apply:
    name: Apply AKS Cluster with Terraform
    needs: [setup-backend, terraform-plan]
    runs-on: ubuntu-latest
    # Only run on main branch or manual workflow dispatch, not on PRs
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production # This creates the approval requirement
    defaults:
      run:
        working-directory: ./tf

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set Terraform Environment Variables
      run: |
        # Set Service Principal credentials from previous job
        echo "ARM_CLIENT_ID=${{ needs.setup-backend.outputs.client_id }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ needs.setup-backend.outputs.client_secret }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ needs.setup-backend.outputs.subscription_id }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ needs.setup-backend.outputs.tenant_id }}" >> $GITHUB_ENV
        # Set Storage Access Key from previous job
        echo "TERRAFORM_STATE_ACCESS_KEY=${{ needs.setup-backend.outputs.access_key }}" >> $GITHUB_ENV
        
        # Debug output (safely)
        echo "Access key first 5 chars: ${TERRAFORM_STATE_ACCESS_KEY:0:5}..."

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    
    - name: Terraform Initialize
      run: |
        terraform init \
          -backend-config="storage_account_name=$TERRAFORM_STATE_STORAGE" \
          -backend-config="container_name=$TERRAFORM_STATE_CONTAINER" \
          -backend-config="access_key=$TERRAFORM_STATE_ACCESS_KEY" \
          -backend-config="key=$TERRAFORM_STATE_KEY"
      
    # Download the plan
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: ./tf

    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false aks-tfplan

    - name: AKS Cluster Information
      run: |
        echo "‚úÖ AKS Cluster deployed successfully!"
        echo "üìÅ Resource Group: $(terraform output -raw resource_group_name)"
        echo "üö¢ AKS Cluster Name: $(terraform output -raw cluster_name)"
        echo "üåê AKS API Server: $(terraform output -raw host || echo 'Not available')"
